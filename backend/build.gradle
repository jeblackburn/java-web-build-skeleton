import com.github.spotbugs.SpotBugsTask

buildscript {
    ext {
        springBootVersion = '2.1.7.RELEASE'
        junitVersion = '5.3.2'
        springCloudVersion = 'Greenwich.RC2'
        lombokVersion = '1.18.10'
        archunit = '0.10.2'
        db_schema_name = 'myData'
    }
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}",
                'nu.studer:gradle-jooq-plugin:3.0.2',
                'org.flywaydb:flyway-gradle-plugin:6.0.0',
                'org.glassfish.jaxb:jaxb-runtime:2.3.1',
                'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.7.1'
        )
    }
}

apply plugin : 'io.spring.dependency-management'
apply plugin : 'java'
apply plugin : 'nu.studer.jooq'
apply plugin : 'org.springframework.boot'
apply plugin : 'org.flywaydb.flyway'

group = 'com.jeb'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    compileOnly(
            'org.springframework.boot:spring-boot-configuration-processor',
    )
    implementation(
            'org.apache.commons:commons-csv:1.6',
            'org.apache.commons:commons-text:1.8',
            'commons-validator:commons-validator:1.4.0',
            'com.google.guava:guava:27.0.1-jre', // we're getting this whether we like it or not so might as well pin it
            'org.flywaydb:flyway-core:6.0.0',
            "org.projectlombok:lombok:$lombokVersion",
            'org.postgresql:postgresql:42.2.5',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-aop',
            'org.springframework.boot:spring-boot-starter-jdbc',
            'org.springframework.boot:spring-boot-starter-jooq',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-web',
            "org.springframework.cloud:spring-cloud-gcp-core:$gcpVersion",
            "org.springframework.cloud:spring-cloud-gcp-starter:$gcpVersion",
            "org.springframework.cloud:spring-cloud-gcp-autoconfigure:$gcpVersion",
            "org.springframework.cloud:spring-cloud-gcp-storage:$gcpVersion",
            "org.springframework.cloud:spring-cloud-gcp-starter-storage:$gcpVersion",
            "org.springframework.cloud:spring-cloud-gcp-bigquery:$gcpVersion",
            "org.springframework.cloud:spring-cloud-gcp-starter-bigquery:$gcpVersion",
            'org.apache.commons:commons-lang3:3.9',
    )
    jooqRuntime(
            'org.postgresql:postgresql:42.2.5',
            'org.glassfish.jaxb:jaxb-runtime:2.3.1',
            'com.sun.activation:javax.activation:1.2.0',
    )
    runtime(
            'org.postgresql:postgresql:42.2.5',
    )
    testImplementation(
            'com.google.cloud:google-cloud-nio:0.79.0-alpha',
            "com.tngtech.archunit:archunit:${archunit}",
            'io.rest-assured:rest-assured:3.3.0',
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.cloud:spring-cloud-contract-wiremock',
    )
    testRuntime(
            "org.junit.jupiter:junit-jupiter-engine:${junitVersion}",
    )
}

jooq {
    edition = 'OSS'
    sample(sourceSets.main) {
        logging = "WARN"
        jdbc {
            driver = 'org.postgresql.Driver'
            url = "jdbc:postgresql://${System.getenv('DATABASE_NAME') ?: 'localhost'}:5432/curvball"
            user = 'example'
            password = 'example'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                schemata {
                    schema {
                        inputSchema = 'public'
                    }
                    schema {
                        inputSchema = 'workflow'
                    }
                }
                forcedTypes {
                    forcedType {
                        binding = 'com.spins.curvball.config.PostgresRepositoryJSONBGsonBinding'
                        expression = '.*'
                        userType = 'com.google.gson.JsonElement'
                        types = '.*JSON.*'
                    }
                }
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
                interfaces = true
                pojosEqualsAndHashCode = true
                pojosToString = true
            }
            target {
                packageName = 'com.jeb.data'
            }
        }
    }
}

flyway {
    url = "jdbc:postgresql://${System.getenv('DATABASE_NAME') ?: 'localhost'}:5432/${db_schema_name}"
    user = 'example'
    password = 'example'
}

flywayMigrate {
    locations = [
            "classpath:db/migration"
    ]
}

flywayClean {
    schemas = ['workflow', 'public']
}

task processMigrationResources(type : Copy) {
    from(processResources.source) {
        include 'db/migration/**'
    }
    into(processResources.destinationDir)
    includeEmptyDirs = false
}

task compileMigrations(type : JavaCompile, dependsOn : processMigrationResources) {
    source = compileJava.source
    classpath = compileJava.classpath
    destinationDir = compileJava.destinationDir
    includes = [
            "db/migration/**"
    ]
}

compileJava.dependsOn(generateSampleJooqSchemaSource)
generateSampleJooqSchemaSource.dependsOn(flywayMigrate)
flywayMigrate.dependsOn(compileMigrations)

test {
    useJUnitPlatform {
        excludeTags 'framework'
    }
    testLogging {
        events 'standard_error'
    }
}

spotbugs {
    effort = "max"
    reportLevel = "low"
    toolVersion = '3.1.12'
    excludeFilter = file("spotbugs-exclude.xml")
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
